---
title: "Journées de l'UMI SOURCE "
author: "Lenaïg MOIGN, Florent Bédécarrats"
format:
  html:
    output-file: "index"
    output-ext: "htm"
    toc: true
editor: visual
execute:
  warning: false
  error: false
editor_options: 
  chunk_output_type: console
---

## 1. OBJECTIFS DE LA FORMATION

## 2. FONCTIONNEMENT DE R STUDIO

A - Interface console

B - Règles de code

Lorsque vous travaillez sur RStudio, il est recommandé de suivre certaines règles de code pour maintenir un code clair, lisible et cohérent. Voici quelques règles générales à prendre en compte :

Indentation : Utilisez une indentation cohérente pour améliorer la lisibilité de votre code. Généralement, l'indentation est de deux espaces ou de quatre espaces, mais l'important est de choisir une convention et de s'y tenir tout au long du code.

Nom des variables : Utilisez des noms de variables descriptifs et significatifs pour améliorer la compréhension du code. Évitez les noms de variables trop courts ou cryptiques. Utilisez des noms en minuscules avec des mots séparés par des underscores pour une meilleure lisibilité.

Commentaires : Utilisez des commentaires pour expliquer des parties complexes du code, des décisions importantes ou pour fournir des informations supplémentaires. Les commentaires aident à comprendre le code plus facilement, en particulier pour les autres personnes qui pourraient lire votre code ultérieurement.

Espacement : Utilisez des espaces pour améliorer la lisibilité. Par exemple, utilisez des espaces autour des opérateurs (comme +, -, \*, /) pour distinguer clairement les éléments.

Limitation de la longueur des lignes : Essayez de limiter la longueur de chaque ligne de code à environ 80 caractères. Si une ligne est trop longue, vous pouvez la diviser en plusieurs lignes en utilisant des indentations appropriées.

Utilisation de parenthèses : Utilisez des parenthèses pour regrouper les expressions complexes et améliorer la lisibilité. Cela aide également à éviter toute ambiguïté dans les opérations.

C- Raccourcis clavier(image)

D- Fonctions qui vont être régulièrement utilées (select, mutate, filter, summarise)

## 3. INSTALLATION ET CHARGEMENT DES LIBRAIRIES R

```{r install_librairies}

# INSTALLATION DES LIBRAIRIES R 

librairies_req <- c("tidyverse",# Une série de packages pour faciliter la manipulation de données
                    "readxl", # Pour lire les fichiers excel (Carvalho et al. 2018)
                    "writexl",# Pour écrire des fichiers excel 
                    "gt",# Pour produire de jolis tableaux
                    "sf", # Pour faciliter la manipulation de données géographiques
                    "maptiles", # Pour télécharger des fonds de carte 
                    "geodata", # Pour télécharger simplement les frontières administratives
                    "tidygeocoder", # Pour obtenir les coordonnées GPS d'un point à partir de son nom 
                    "tmap",# Pour produire de jolies cartes 
                    "wdpar", # Pour télécharger la base d'aires protégées WDPA
                    "mapme.biodiversity") # Pour importer et analyser des indicateurs de biodiversité

manquantes <- !(librairies_req %in% installed.packages())
if (any(manquantes)) install.packages(librairies_req[manquantes])

# CHARGEMENT DES LIBRAIRIES NÉCESSAIRES AUX PREMIERS TRAVAUX

library(tidyverse)
library(geodata)
library(sf)
library(tmap)
library(wdpar)
library(gt)
library(dplyr)
library(lubridate)
library(tmap)
library(mapme.biodiversity)

# webdriver::install_phantomjs()
```

## 2. CHARGEMENT DES DONNÉES SUR LES AIRES PROTÉGÉES

L'initiative WDPA (World Database on Protected Areas) est un projet international visant à recueillir, à gérer et à diffuser des informations sur les aires protégées à travers le monde.

Cette initiative est coordonnée par l'UICN (Union internationale pour la conservation de la nature) et est soutenue par plusieurs partenaires et organisations internationales.

La base de données WDPA constitue une source d'information complète sur les aires protégées, y compris les parcs nationaux, les réserves naturelles, les sites du patrimoine mondial, les aires marines protégées et d'autres types d'espaces préservés. Elle rassemble des données sur les limites géographiques, les statuts juridiques, les catégories de gestion, la taille, la biodiversité, les écosystèmes et d'autres caractéristiques des aires protégées.

L'objectif principal de l'initiative WDPA est de fournir un outil fiable et accessible pour la planification de la conservation, la recherche scientifique, la prise de décisions politiques et la sensibilisation du public. Les données de la WDPA sont utilisées par les gouvernements, les chercheurs, les organisations environnementales et d'autres acteurs pour évaluer l'efficacité des aires protégées, suivre les progrès en matière de conservation, identifier les lacunes dans la protection et informer les politiques de conservation.

La base de données WDPA est régulièrement mise à jour grâce à la contribution des pays, des organisations partenaires et des sources d'information disponibles. Elle est accessible en ligne et peut être consultée par le grand public, permettant ainsi une transparence et une diffusion des informations sur les aires protégées à l'échelle mondiale.

```{r}

# TÉLÉCHARGEMENT DES DONNÉES DU WDPA AVEC LE PACKAGE WDPAR

# On commence par importer les données libre d'accès, on les enregistre sur 
# le disque local  

if (!file.exists("data/WDPA/WDPA_Jun2023_SEN-shapefile.zip")) {
  WDPA_Senegal <- wdpa_fetch("Senegal", wait = TRUE, 
                          download_dir = "data/WDPA") 
} else {
  # Enregistrement serveur local 
  WDPA_Senegal <- wdpa_read("data/WDPA/WDPA_Jun2023_SEN-shapefile.zip") 
}

```

Aller lire la documentation et notamment la table attributaire pour comprendre le tableau

## 3. CHARGEMENT DES CONTOURS ADMINISTRATIFS

```{r}

# TÉLÉCHARGEMENT DES DONNÉES DU WDPA AVEC LE PACKAGE GEODATA

# On commence par importer les données libre d'accès, on les enregistre sur 
# le disque local et on les convertit au format standardisé sf 

contour_sen <- gadm(country = "Senegal", resolution = 1, level = 0, 
                     path = "data/GADM") %>%  
  st_as_sf() 
```

## 4. EXPLORATION DES DONNÉES DISPONIBLES SUR LES AIRES PROTÉGÉES

# CARACTÉRISTIQUES SPATIALES

On charge de l'information géographique, il est important de connaître les caractéristiques de base des objets à savoir :

Quels types de géométrie ? Quel système de projection ?

```{r}

# CONNAÎTRE LES GÉOMÉTRIES DE LA COUCHE (POINTS, LIGNES, POLYGONES) 

# On crée une colonne pour connaître la géométrie de chaque observation (mutate) 
# On trie les données en fonction de leur géométrie (group_by) 
# On résume l'effectif total pour chaque catégorie de géométrie (summarise). 

WDPA_Senegal %>%
  mutate(geom_type = st_geometry_type(.)) %>%  
  group_by(geom_type) %>%  
  summarise(n = n()) 

# CONNAÎTRE LE SYSTÈME DE PROJECTION 

crs(WDPA_Senegal)
crs(contour_sen)

crs(contour_sen) == crs(WDPA_Senegal)
```

Pour aller plus loin : définir le système de projection de notre fichier

```{r}

# DÉFINIR OU REDÉFINIR A LA MAIN LA PROJECTION 

# Si il manque la projection (absence de fichier .prj), 
# alors on peut la spécifier à la main avec le package sf
# EPSG 4326 = WSG 84 = le standard pour le web


WDPA_Senegal <- st_read("data/GADM.shp", quiet = TRUE) %>% 
  st_set_crs("EPSG:4326")  
  
```

# POUR ALLER PLUS LOIN : CONNAÎTRE LES DONNÉES MANQUANTES

Afin d'avoir un aperçu synthétique des données manquantes, il est possible d'exécuter les commandes suivantes :

```{r}

# CRÉER UN TABLEAU SYNTHÉTIQUE POUR AVOIR UNE VUE GLOBALE DES DONNÉES MANQUANTES

# On supprime tout d'abord la colonne des géométries pour faciliter le traitement
# On résume les données qui nous intéresse à savoir l'effectif total d'aires
# protégées, les catégories IUCN, année de création et gestionnaire
# La fonction pivot_longer permet de passer d'un format large à un format long
# Ce format est nécessaire pour créer des tableaux stylisés avec la fonction gt
# On ajoute un titre et les sources

WDPA_Senegal %>%
  st_drop_geometry() %>% 
  summarise("Nombre total d'aires protégées" = n(),
            "Catégorie IUCN manquante" = sum(IUCN_CAT == "Not Reported"),
            "Année de création manquante" = sum(STATUS_YR == 0),
            "Gestionnaire manquant" = sum(MANG_AUTH == "Not Reported")) %>%
  pivot_longer(cols = everything(),
               names_to = " ",
               values_to = "Nombre d'aires") %>%
  gt() %>%
  tab_header("Valeurs manquantes dans les données WDPA pour le Sénégal") %>%
  tab_source_note("Source : WDPA (juin 2023)")

```

# POUR ALLER PLUS LOIN : SÉLECTIONNER LES DONNÉES AVE LES OPÉRATEURS

Pour connaître les aires protégées créées en 2020 :

```{r}

WDPA_Senegal %>% 
filter(STATUS_YR == 2020) %>% 
select(NAME, DESIG)  

```

Pour connaître les aires protégées créées avant 1972 :

```{r}

WDPA_Senegal %>% 
filter(STATUS_YR < 1972) %>% 
select(NAME, DESIG) 

# Dans le tableau WDPA, de nombreuses aires protégées enregistrent une année
# de création égale à 0 (manque d'information). On rectifie notre filtration. 

WDPA_Senegal %>% 
  filter(STATUS_YR < 1972 & STATUS_YR != 0) %>% 
  select(NAME, DESIG) 

```

Connaître les aires protégées créées par mandat présidentiel :

```{r}

# CRÉATION D'UNE COLONNE AVEC LES PÉRIODES DES TROIS MANDATS

# Dans un premier temps, on doit créer une colonne pour définir les périodes 
# On exclut les AP dont l'année de création n'est pas renseignée
# On crée une colonne Periode que l'on divise en catégories de période
# On exclut les valeurs NA correspondant aux années avant 1981 

WDPA_mandats <- WDPA_Senegal %>%
  filter(STATUS_YR != 0) %>% 
  mutate(Periode = cut(STATUS_YR, breaks = c(1981, 2000, 2012, 2020),
                       labels = c("1981-2000", "2000-2012", "2012-2020"),
                       include.lowest = TRUE)) %>% 
  filter(!is.na(Periode)) 

# CALCULER L'EFFECTIF TOTAL D'AIRES PROTÉGÉES SUR LES 3 MANDATS 

# On sélectionne les polygones dont l'année de création est renseignée
# On groupe les données par période de création de l'aire protégée
# On calcule le nombre d'observations pour chaque période 
# On trie les données dans l'ordre croissant 

AP_mandats <- WDPA_mandats %>%
  filter(st_geometry_type(.) == "MULTIPOLYGON" & Periode != "NA") %>%
  group_by(Periode) %>% 
  summarise(Effectif_total = n()) %>%  
  arrange(Periode) %>% #Tri des données par ordre croissant
  mutate(Nom = c("ABDOU DIOUF", "ABDOULAYE WADE", "MACKY SALL"))

# CRÉATION D'UN JOLI TABLEAU AVEC LE PACKAGE GT 
 
AP_mandats %>%
  st_drop_geometry()%>% 
  gt() %>%
  cols_label(Periode = "Mandat", Effectif_total = "Nombre de création d'aires protégées", Nom = "Président") %>%
  tab_header("Nombre de création d'aires protégées durant les derniers mandats présidentiels au Sénégal") %>%
  tab_source_note("Source : Données du WDPA (juin 2023)")

```

# 5. PRODUIRE DES CARTES SYNTHÉTIQUES SUR LES AIRES PROTÉGÉES

Carte 1. Les différentes catégories d'aires protégées au Sénégal d'après les données satellitaires du WDPA

```{r}

# PRODUCTION DE CARTES THÉMATIQUES ET ESTHÉTIQUES AVEC LE PACKAGE TMAP (COMPLETER)

tmap_mode(mode = "view") 
tm_shape(contour_sen) +
  tm_borders() + 
  tm_shape(WDPA_Senegal) + 
  tm_polygons(col = "DESIG", alpha = 0.6, title = "Catégories d'aires protégées au Sénégal",
              id = "NAME", 
              popup.vars = c("Type" = "DESIG", 
                             "Catégorie IUCN" = "IUCN_CAT",
                             "Surface déclarée" = "REP_AREA",
                             "Année du statut" = "STATUS_YR"))

tmap_options(check.and.fix = TRUE)

```

# POUR ALLER PLUS LOIN : CHANGER LES VARIABLES AFFICHÉES

Carte 2. En fonction de la catégorie IUCN

```{r}

tmap_mode(mode = "view") 

tm_shape(contour_sen) +
tm_borders() + 
tm_shape(WDPA_Senegal) + 
tm_polygons(col = "IUCN_CAT", alpha = 0.6, title = "Catégorie IUCN",
            id = "NAME", 
            popup.vars = c("Type" = "DESIG", 
                            "Catégorie IUCN" = "IUCN_CAT",
                            "Surface déclarée" = "REP_AREA",
                            "Année du statut" = "STATUS_YR"))

tmap_options(check.and.fix = TRUE)

```

Carte 3. En fonction de l'année de création

```{r}

# On sélectionne uniquement les champs qui sont renseignés dans la colonne STATUS_YR

WDPA_Senegal_yr <- WDPA_Senegal %>% 
  filter(STATUS_YR != 0)

# Sur le rendu de la carte, une seule catégorie d'année apparaît 

tm_shape(contour_sen) +
  tm_borders() +
  tm_shape(WDPA_Senegal_yr) +
  tm_polygons(col = "STATUS_YR", alpha = 0.6, 
              title = "Création d'aires protégées au Sénégal",
              legend.format = list(big.mark = ""),
              id = "NAME",
              popup.vars = c("Type" = "DESIG",
                             "Catégorie IUCN" = "IUCN_CAT",
                             "Surface déclarée" = "REP_AREA"))

```

Carte 4. En fonction de la nature de l'aire protégée (marine/terrestre)

```{r}

# OPTION 1 : UTILISATION DU GÉO-TRAITEMENT DU PACKAGE SF 

# On peut alors réaliser une intersection avec le contour administratif 
# Pour avoir les aires protégées terrestres 
# A l'inverse, on fait une différence avec les frontières pour obtenir 
# Les aires marines

PA_terrestre <- WDPA_Senegal %>%
  st_intersection(contour_sen) 
PA_marine <- WDPA_Senegal %>%
  st_difference(contour_sen) 

tm_shape(PA_terrestre) +
  tm_polygons(col = "brown") +
tm_shape(PA_marine) + 
  tm_polygons(col = "blue")

# OPTION 2 : UTILISATION DE LA TABLE D'ATTRIBUTS
WDPA_Senegal %>%
  mutate(MARINE = case_when(
    MARINE == 0 ~ "Terrestres",
    MARINE == 1 ~ "Côtières",
    MARINE == 2 ~ "Marines")) %>%
  tm_shape() + 
  tm_polygons(col = "MARINE", alpha = 0.6, title = "Aires protégées")


```

## 6. ACQUISITION DE DONNÉES ENVIRONNEMENTALES ET CALCUL D'INDICATEURS

# Le package mapme.biodiversity

Le package "mapme.biodiversity" facilite l'analyse de données statistiques sur les aires protégées partout dans le monde.

Il supporte un nombre important de base de données et d'indicateurs associés relatifs à la biodiversité qui peuvent être utilisés pour surveiller et évaluer l'efficacité des efforts de protection.

Pour l'analyse des données géographiques, le package utilise sf pour l'exploitation des données vectorielles et terra pour les données rasters. Il supprime les tâches répétitives, telles que la la sélection temporelle et spatiale des ressources.

```{r}

help(package = "mapme.biodiversity")

```

Le package permet de calculer, via une importation de données provenant de sources open data, des indicateurs, disponibles sur des intervalles de temps réguliers pour environ deux décennies (2020-2020).

Ces indicateurs permettent aux usagers d'analyser des dynamiques spatiales et temporelles relatives aux aires protégées. Pour connaître les ressources et les indicateurs associés disponibles :

```{r}

resources <- names(available_resources())
indicators <- names(available_indicators())

```

A la lecture de la liste, l'utilisateur choisit quels sont les indicateurs qui l'intéresse en fonction de ses objectifs d'analyse. Plus de détails sur les indicateurs (source, unité, limites) sont consultables sur le site : https://mapme-initiative.github.io/mapme.biodiversity/reference/index.html ou peuvent faire l'objet d'une recherche.

```{r}

?gmw

```

# Constitution d'un porte-feuille

Une fois le choix effectué, il doit d'abord initier un portefeuille de la biodiversité en utilisant un objet sf qui contient uniquement des géométries de type "polygone" via l'appel de la fonction init_portfolio().

Il s'agit d'apporter un traitement spécifique à l'objet sf constitué de polygones. Chaque ligne de l'objet est alors considérée comme un actif unique dans le portefeuille pour lequel des indicateurs de biodiversité seront calculés plus loin dans la chaîne de traitement.

NB : Si les aires protégées sont de type multipolygone, on applique la fonction st_cast() pour considérer les polygones individuellement.

C'est-à-dire que le portefeuille produit des colonnes imbriquées pour chaque observation, car dans bien des cas, on peut avoir plusieurs valeurs (par année) pour une même observation, voire plusieurs variables. Par exemple, le calcul de l'indicateur traveltime produit des estimations de distance par rapport à une ville pour plusieurs tailles de ville possible. Lorsqu'on spécifie une taille, il produit deux variables : la distance estimée et la taille de la ville prise en compte pour l'estimation.

En créant le portefeuille, certaines vérifications préliminaires sont également effectuées, par exemple que le SRS de l'objet est EPSG:4326, sinon il sera transformé.

Certains paramètres globaux du portefeuille, tels que le répertoire de sortie pour les ensembles de données téléchargés, un répertoire temporaire pour les calculs intermédiaires, peuvent être définis par l'utilisateur pour avoir un contrôle plus précis du flux de travail. Cependant, ces paramètres sont également définis sur des valeurs par défaut sensibles et peuvent donc être omis lors de l'initialisation du portefeuille.

Cela va régler des informations importantes qui sont nécessaires plus loin dans la chaîne de traitement. Il est ensuite possible de demander le téléchargement d'une ressource qui est nécessaire pour importer les données dans le portefeuille et calculer les indicateurs spécifiques.

```{r}

# EXÉCUTION DE LA FONCTION INIT_PORTFOLIO 

# Avant de créer le porte-feuille, on filtre notre couche WDPA 
# L'idée est de ne garder que les données  pertinentes (années renseignées, 
# et géométries de type polygone ou multi-polygone)

WDPA_Senegal_poly <- WDPA_Senegal %>%
  filter(STATUS_YR != 0) %>%
  filter(st_geometry_type(geometry) != "MULTIPOINT")

# Certaines aires protégées sont composées de plusieurs polygones disjoints  
# On les scinde volontairement pour les traiter séparement 
# Pour une analyse par AP, on pourra agréger les résultats

WDPA_mapme <- WDPA_Senegal_poly %>% 
  st_cast("POLYGON")

WDPA_mapme <- init_portfolio(x = WDPA_mapme, 
                                     years = 2000:2023,
                                     outdir = "data/mapme_Senegal",
                                     add_resources = TRUE,
                                     verbose = TRUE)

```

On récupère les données provenant des différentes sources d'open data et on calcule des indicateurs :

```{r}

# Données de Global Forest Watch (GFW) sur le couvert forestier

WDPA_mapme <- get_resources(x = WDPA_mapme, 
                            resources = c("gfw_treecover", "gfw_lossyear"))

# Calcul d'indicateurs GFW
progressr::with_progress({ # Ceci sert à avoir une barre de progression
  # Cette commande calcule les indicateurs à partir des ressources téléchargées
  WDPA_mapme <- calc_indicators(WDPA_mapme,
                                    indicators = "treecover_area",
                                    min_cover = 30, min_size = 1)
})

```

Exercice 1 : importer les indicateurs sur la surface de mangrove

```{r}

# Données de Global Mangrove Watch (GMW) sur la surface de mangroves 

WDPA_mapme <- get_resources(x = WDPA_mapme,resources = "gmw")


# Calcul des indicateurs GMW

WDPA_mapme <- calc_indicators(WDPA_mapme,
                              indicators = "mangroves_area")
                            

# ENREGISTREMENT DES DONNEES GFW + GMW SUR 1 FICHIER RDS

save(WDPA_mapme, file = "data/WDPA_indicators.rds") 

```

Exercice 2 : quelle est la différence entre les données GFW et GMW ?

GFW 2 indicateurs et GMW 1 indicateur GFW observations continues sur 2020 à 2023 alors que GMW uniquement pour les périodes 1996, 2007-2010, 2015 et 2016

## 7. TRI DES DONNÉES POUR FACILITER L'EXPLORATION

Une fois que l'indicateur a été calculé individuellement pour tous les "actifs" du portefeuille, les données sont renvoyées sous la forme d'une colonne de liste imbriquée à l'objet d'origine.Si on a plusieurs indicateurs, on aura plusieurs colonnes avec des listes ayant une, deux ou plusieurs variables.

Cette imbrication n'est pas toujours indispensable. Par exemple, pour les cinq variables calculées ici (couvert forestier, surface de mangrove, rugosité, altitude et distance à une ville), car on ne cherche qu'une valeur par observation. On va donc dés-imbriquer les variables à l'aide de la fonction unnest().

On doit aussi se rappeler que les aires protégées sont parfois composées de plusieurs polygones disjoints et que mapme.biodiversity a calculé chaque indicateur pour chaque polygone séparément. Pour chaque aire protégée, on va donc faire la moyenne de ces indicateurs, pondérée par la surface respective de chaque polygone.

# Désimbrication des indicateurs

initialement sous forme de liste + expliquer pourquoi 2 unnest

```{r}

# DÉSIMBRICATION DES LISTES D'INDICATEURS 

# On déplie les données des colonnes importées 

WDPA_terrain <- WDPA_mapme %>%
  unnest(c(treecover_area)) %>% 
  unnest(c(mangroves_area)) 

```

On obtient alors un tableau avec un nombre d'observations important pour un même polygone. Pour un espace donné, plusieurs variables sont mesurées et sur des périodes de temps différentes.

# Sélection des variables les plus pertinentes

Diminution du nombre de colonnes (A VOIR SI PERTINENT)

```{r}

WDPA_stats <- WDPA_terrain %>% 
  select(Nom = ORIG_NAME, 
         Surface = REP_AREA, 
         Aire_marine_terrestre = MARINE, 
         Mangrove_surface = mangrove_extent,
         Annees_mangrove = year,
         Couvert_foret = treecover,
         Annees_f = years,
         Categorie = DESIG,
         Annee_creation = STATUS_YR,
         Geometrie = geometry) 

```

Exercice 3. A partir des données WDPA_stats : créer un tableau WDPA_stats_moyenne (avec l'assignation) et calculer pour chaque aire protégée, les moyennes de surface de mangrove et de couvert forestier

Fonctions à utiliser : group_by() summarize()

```{r}

WDPA_stats_moyenne <- WDPA_stats %>% 
  group_by(Nom) %>%
  summarize(Moyenne_surface_mangrove = format(mean(Mangrove_surface),scientific = FALSE),
            Moyenne_couvert_foret = mean(Couvert_foret))

```

## 8. EXPLORATION DES DONNÉES AIRES PROTÉGÉES COUPLÉES AUX INDICATEURS ENVIRONNEMENTAUX

Exercice 4 : Quel est le nom des aires protégées qui ont à la fois de la forêt et de la mangrove dans leur périmètre ?

Fonctions à utiliser :

filter() opérateurs group_by()

```{r}

WDPA_stats_moyenne %>% 
  filter(Moyenne_couvert_foret != 0 & Moyenne_surface_mangrove != 0) %>%
  group_by(Nom)

```

Exercice 5 : A partir du tableau WDPA_stats, afficher les données sur l'Aire Marine Protégée de la Somone

Fonctions à utiliser : filter()

```{r}

WDPA_Somone <-  WDPA_stats %>% 
  filter(Nom == "Aire Marine Protégée de la Somone") 
  
```

Piège : superficie en km² alors que superficie de la mangrove en Ha, on va donc modifier notre tableau pour convertir les Ha en km²

```{r}

WDPA_stats <- WDPA_stats %>%
  mutate(Surface_AP_Ha = Surface * 100) %>%
  select(-Surface)

```

# POUR ALLER PLUS LOIN : CALCUL DU POURCENTAGE DE MANGROVE ET DE FORET PAR POLYGONE

Création de colonnes présentant le pourcentage de mangrove et du couvert forestier par rapport à la superficie de l'aire protégée

```{r}

WDPA_pourcentage <- WDPA_stats %>%
  mutate(Pourcent_mangrove = ifelse(Surface_AP_Ha != 0 & !is.na(Surface_AP_Ha), (Mangrove_surface / Surface_AP_Ha) * 100, 0),
       Pourcent_foret = ifelse(Surface_AP_Ha != 0 & !is.na(Surface_AP_Ha), (Mangrove_surface / Surface_AP_Ha) * 100, 0)
         )

```

# PRODUCTION D'UNE CARTE THÉMATIQUE SUR LE COUVERT FORESTIER PAR AIRE PROTÉGÉE

A. Création d'un tableau : couvert forestier par année et par aire protégée

```{r}

WDPA_foret <- WDPA_stats %>%
  group_by(Nom) %>% 
  summarise(Couvert_foret = mean(Couvert_foret, na.rm = TRUE), 
            Annee_creation = first(Annee_creation), 
            Surface = first(Surface_AP_Ha))

  # pivot_wider(names_from = year, values_from = treecover, values_fill = 0)

```

Question de l'information qui apparaît, c'est le résultat de la dernière année

```{r}

tmap_mode(mode = "view") 
tm_shape(contour_sen) +
tm_borders() + 
tm_shape(WDPA_stats) + 
tm_polygons(col = "Couvert_foret", alpha = 0.6, title = "Couvert forestier des aires protégées en 2020 au Sénégal",
              id = "Nom",
              legend.format = list(big.mark = ""),
              popup.vars = c("Categorie" = "Categorie",
                             "Surface déclarée" = "Surface",
                             "Année de création " = "Annee_creation")) 
```

(RECTIFIER LES ANNÉES)

Exercice 6. Produire la même carte avec la mangrove

```{r}

WDPA_mangrove <- WDPA_stats %>%
  group_by(Nom) %>% 
  summarise(Mangrove_surface = format(mean(Mangrove_surface, na.rm = TRUE), scientific = FALSE), 
            Annee_creation = first(Annee_creation), 
            Surface = first(Surface_AP_Ha))

```

Carte :

```{r}
tmap_mode(mode = "view") 
tm_shape(contour_sen) +
tm_borders() + 
tm_shape(WDPA_stats) + 
tm_polygons(col = "Mangrove_surface", alpha = 0.6, title = "Superficie de la mangrove des aires protégées en 2020 au Sénégal",
              id = "Nom",
              legend.format = list(big.mark = ""),
              popup.vars = c("Categorie" = "Categorie",
                             "Surface déclarée" = "Surface_AP_Ha",
                             "Année de création " = "Annee_creation")) 

```

voir pour tm_shape si WDPA_stats ou WDPA_mangrove

voir les problèmes avec surface et surface_AP_Ha
